{"ast":null,"code":"//\n// ## Returns array of words in text\n// ## For CJK languages almost every char is a word,\n// ## for other languages words are separated by spaces\n//\nmodule.exports = function (text) {\n  // Test for CJK characters\n  if (/[\\u3400-\\u9FBF]/.test(text)) {\n    // Contains CJK characters\n    var words = [];\n    const characters = text.split(\"\");\n    for (var i = 0; i <= characters.length - 1; i++) if (!containsPunctations(characters[i + 1])) {\n      // Next character is \"normal\"\n      words.push(characters[i]);\n    } else {\n      // Next character isn't a single word\n      words.push(characters[i] + characters[i + 1]);\n      i++;\n    }\n    return words;\n  } else {\n    // Other language\n    // Converts returns in spaces, removes double spaces\n    text = text.replace(/(\\r\\n|\\n|\\r)/gm, \" \").replace(/\\s+/g, \" \");\n    // Simply split by spaces\n    return text.split(\" \");\n  }\n};\n\n//\n// ## Returns true if text contains puntaction characters\n//\ncontainsPunctations = function (text) {\n  // Test string against regexp for many punctactions characters, including CJK ones\n  return /[\\uFF01-\\uFF07,\\u0021,\\u003F,\\u002E,\\u002C,\\u003A,\\u003B,\\uFF1A-\\uFF1F,\\u3002,\\uFF0C-\\uFF0E,\\u2000-\\u206F,\\uFFED-\\uFFEF,\\u0028,\\u0029]/.test(text);\n};","map":{"version":3,"names":["module","exports","text","test","words","characters","split","i","length","containsPunctations","push","replace"],"sources":["D:/KURALBOT/my-frontend/node_modules/words-array/index.js"],"sourcesContent":["//\r\n// ## Returns array of words in text\r\n// ## For CJK languages almost every char is a word,\r\n// ## for other languages words are separated by spaces\r\n//\r\nmodule.exports = function(text) {\r\n\r\n\t// Test for CJK characters\r\n\tif (/[\\u3400-\\u9FBF]/.test(text)) {\r\n\r\n\t\t// Contains CJK characters\r\n\t\tvar words = []\r\n\t\tconst characters = text.split(\"\");\r\n\t\tfor (var i = 0; i <= characters.length - 1; i++)\r\n\t\t\tif (!containsPunctations(characters[i + 1])) {\r\n\t\t\t\t// Next character is \"normal\"\r\n\t\t\t\twords.push(characters[i])\r\n\t\t\t} else {\r\n\t\t\t\t// Next character isn't a single word\r\n\t\t\t\twords.push(characters[i] + characters[i + 1])\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\r\n\t\treturn words\r\n\r\n\t} else {\r\n\r\n\t\t// Other language\r\n\t\t// Converts returns in spaces, removes double spaces\r\n\t\ttext = text.replace(/(\\r\\n|\\n|\\r)/gm,\" \").replace(/\\s+/g,\" \")\r\n\t\t// Simply split by spaces\r\n\t\treturn text.split(\" \")\r\n\r\n\t}\r\n\r\n}\r\n\r\n//\r\n// ## Returns true if text contains puntaction characters\r\n//\r\ncontainsPunctations = function(text) {\r\n\t// Test string against regexp for many punctactions characters, including CJK ones\r\n\treturn /[\\uFF01-\\uFF07,\\u0021,\\u003F,\\u002E,\\u002C,\\u003A,\\u003B,\\uFF1A-\\uFF1F,\\u3002,\\uFF0C-\\uFF0E,\\u2000-\\u206F,\\uFFED-\\uFFEF,\\u0028,\\u0029]/.test(text)\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAG,UAASC,IAAI,EAAE;EAE/B;EACA,IAAI,iBAAiB,CAACC,IAAI,CAACD,IAAI,CAAC,EAAE;IAEjC;IACA,IAAIE,KAAK,GAAG,EAAE;IACd,MAAMC,UAAU,GAAGH,IAAI,CAACI,KAAK,CAAC,EAAE,CAAC;IACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,UAAU,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAC9C,IAAI,CAACE,mBAAmB,CAACJ,UAAU,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;MAC5C;MACAH,KAAK,CAACM,IAAI,CAACL,UAAU,CAACE,CAAC,CAAC,CAAC;IAC1B,CAAC,MAAM;MACN;MACAH,KAAK,CAACM,IAAI,CAACL,UAAU,CAACE,CAAC,CAAC,GAAGF,UAAU,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7CA,CAAC,EAAE;IACJ;IAED,OAAOH,KAAK;EAEb,CAAC,MAAM;IAEN;IACA;IACAF,IAAI,GAAGA,IAAI,CAACS,OAAO,CAAC,gBAAgB,EAAC,GAAG,CAAC,CAACA,OAAO,CAAC,MAAM,EAAC,GAAG,CAAC;IAC7D;IACA,OAAOT,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC;EAEvB;AAED,CAAC;;AAED;AACA;AACA;AACAG,mBAAmB,GAAG,SAAAA,CAASP,IAAI,EAAE;EACpC;EACA,OAAO,wIAAwI,CAACC,IAAI,CAACD,IAAI,CAAC;AAC3J,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}