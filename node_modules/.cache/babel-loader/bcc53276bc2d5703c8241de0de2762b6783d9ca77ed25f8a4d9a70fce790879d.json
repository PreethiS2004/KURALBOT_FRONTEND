{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst Thirukkural = require('./Thirukkural');\nconst cors = require('cors');\nconst {\n  spawn\n} = require('child_process');\nconst path = require('path');\nconst app = express();\nconst port = 5000;\n\n// Middleware to handle CORS\napp.use(cors());\n\n// Connect to MongoDB with error handling\nmongoose.connect('mongodb://127.0.0.1:27017/CHATBOT', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log('MongoDB connected successfully');\n}).catch(error => {\n  console.error('Error connecting to MongoDB:', error);\n  process.exit(1); // Exit the process if the connection fails\n});\n\n// Middleware\napp.use(express.json());\n\n// Function to handle errors\nconst handleError = (res, error) => {\n  console.error('Error handling request:', error);\n  res.status(500).json({\n    message: 'Server error',\n    error: error.message\n  });\n};\n\n// Function to parse Python script output\nconst parsePythonOutput = output => {\n  try {\n    return JSON.parse(output);\n  } catch (parseError) {\n    console.error('Error parsing Python script output:', parseError);\n    return {\n      error: parseError.message\n    };\n  }\n};\n\n// Endpoint to get Kural details based on query parameters\napp.get('/api/kurals', async (req, res) => {\n  try {\n    const {\n      chapterName,\n      sectionName,\n      verse,\n      translation,\n      explanation,\n      Chapter,\n      Chapter_Eng\n    } = req.query;\n\n    // Validate input query parameters\n    if (!chapterName && !sectionName && !verse && !translation && !explanation) {\n      return res.status(400).json({\n        message: 'No valid query parameters provided'\n      });\n    }\n\n    // Initialize pythonScriptArgs\n    let pythonScriptArgs = [];\n    if (chapterName) pythonScriptArgs.push(chapterName, \"chapterName\");\n    if (sectionName) pythonScriptArgs.push(sectionName, \"sectionName\");\n    if (verse) pythonScriptArgs.push(verse, \"verse\");\n    if (translation) pythonScriptArgs.push(`\"${translation}\"`, `\"translation\"`);\n    if (explanation) pythonScriptArgs.push(`\"${explanation}\"`, `\"explanation\"`);\n    if (Chapter) pythonScriptArgs.push(Chapter, \"Chapter\");\n    if (Chapter_Eng) pythonScriptArgs.push(Chapter_Eng, \"Chapter_Eng\");\n    console.log('Python script args:', pythonScriptArgs);\n\n    // Execute the Python script using spawn\n    const pythonScriptPath = path.join(__dirname, 'test.py');\n    const pythonProcess = spawn('python', [pythonScriptPath, ...pythonScriptArgs]);\n    console.log('Python script path:', pythonScriptPath);\n    let output = '';\n    let errorOutput = '';\n    console.log('Python script args:', pythonScriptArgs);\n    pythonProcess.stdout.on('data', data => {\n      output += data.toString().trim();\n    });\n    pythonProcess.stderr.on('data', data => {\n      errorOutput += data.toString().trim();\n    });\n    pythonProcess.on('close', async code => {\n      if (code !== 0) {\n        console.error('Python script exited with code:', code);\n        console.error('Error output:', errorOutput);\n        return res.status(500).json({\n          message: 'Error executing Python script',\n          error: errorOutput\n        });\n      }\n\n      // Parse the output of the Python script\n      const result = parsePythonOutput(output);\n      if (result.error) {\n        return res.status(500).json({\n          message: 'Error from Python script',\n          error: result.error\n        });\n      }\n      const numbers = result.numbers;\n      if (!numbers || numbers.length === 0) {\n        return res.status(404).json({\n          message: 'No Kural details found for the given parameters'\n        });\n      }\n\n      // Fetch Kural details from MongoDB\n      const kurals = await Thirukkural.find({\n        number: {\n          $in: numbers\n        }\n      });\n      if (kurals.length === 0) {\n        return res.status(404).json({\n          message: 'No Kural details found for the given numbers'\n        });\n      }\n      res.status(200).json(kurals);\n    });\n  } catch (error) {\n    handleError(res, error);\n  }\n});\n\n// Middleware to handle 404 errors\napp.use((req, res, next) => {\n  res.status(404).json({\n    message: 'Endpoint not found'\n  });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  handleError(res, err);\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","Thirukkural","cors","spawn","path","app","port","use","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","error","process","exit","json","handleError","res","status","message","parsePythonOutput","output","JSON","parse","parseError","get","req","chapterName","sectionName","verse","translation","explanation","Chapter","Chapter_Eng","query","pythonScriptArgs","push","pythonScriptPath","join","__dirname","pythonProcess","errorOutput","stdout","on","data","toString","trim","stderr","code","result","numbers","length","kurals","find","number","$in","next","err","listen"],"sources":["D:/KURALBOT/my-frontend/src/KuralSearch.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Thirukkural = require('./Thirukkural');\r\nconst cors = require('cors');\r\nconst { spawn } = require('child_process');\r\nconst path = require('path');\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Middleware to handle CORS\r\napp.use(cors());\r\n\r\n// Connect to MongoDB with error handling\r\nmongoose.connect('mongodb://127.0.0.1:27017/CHATBOT', {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n}).then(() => {\r\n    console.log('MongoDB connected successfully');\r\n}).catch((error) => {\r\n    console.error('Error connecting to MongoDB:', error);\r\n    process.exit(1); // Exit the process if the connection fails\r\n});\r\n\r\n// Middleware\r\napp.use(express.json());\r\n\r\n// Function to handle errors\r\nconst handleError = (res, error) => {\r\n    console.error('Error handling request:', error);\r\n    res.status(500).json({ message: 'Server error', error: error.message });\r\n};\r\n\r\n// Function to parse Python script output\r\nconst parsePythonOutput = (output) => {\r\n    try {\r\n        return JSON.parse(output);\r\n    } catch (parseError) {\r\n        console.error('Error parsing Python script output:', parseError);\r\n        return { error: parseError.message };\r\n    }\r\n};\r\n\r\n// Endpoint to get Kural details based on query parameters\r\napp.get('/api/kurals', async (req, res) => {\r\n    try {\r\n        const { chapterName, sectionName, verse, translation, explanation, Chapter, Chapter_Eng } = req.query;\r\n        \r\n        // Validate input query parameters\r\n        if (!chapterName && !sectionName && !verse && !translation && !explanation) {\r\n            return res.status(400).json({ message: 'No valid query parameters provided' });\r\n        }\r\n        \r\n        // Initialize pythonScriptArgs\r\n        let pythonScriptArgs = [];\r\n\r\n        if (chapterName) pythonScriptArgs.push(chapterName, \"chapterName\");\r\n        if (sectionName) pythonScriptArgs.push(sectionName, \"sectionName\");\r\n        if (verse) pythonScriptArgs.push(verse,\"verse\");\r\n        if (translation) pythonScriptArgs.push(`\"${translation}\"`, `\"translation\"`);\r\n        if (explanation) pythonScriptArgs.push(`\"${explanation}\"`, `\"explanation\"`);\r\n        if (Chapter) pythonScriptArgs.push(Chapter, \"Chapter\");\r\n        if (Chapter_Eng) pythonScriptArgs.push(Chapter_Eng, \"Chapter_Eng\");\r\n\r\n        console.log('Python script args:', pythonScriptArgs);\r\n\r\n        // Execute the Python script using spawn\r\n        const pythonScriptPath = path.join(__dirname, 'test.py');\r\n        const pythonProcess = spawn('python', [pythonScriptPath, ...pythonScriptArgs]);\r\n        console.log('Python script path:', pythonScriptPath);\r\n        \r\n        let output = '';\r\n        let errorOutput = '';\r\n        console.log('Python script args:', pythonScriptArgs);\r\n        pythonProcess.stdout.on('data', (data) => {\r\n            output += data.toString().trim(); \r\n        });\r\n\r\n        pythonProcess.stderr.on('data', (data) => {\r\n            errorOutput += data.toString().trim(); \r\n        });\r\n\r\n        pythonProcess.on('close', async (code) => {\r\n            if (code !== 0) {\r\n                console.error('Python script exited with code:', code);\r\n                console.error('Error output:', errorOutput);\r\n                return res.status(500).json({ message: 'Error executing Python script', error: errorOutput });\r\n            }\r\n        \r\n            // Parse the output of the Python script\r\n            const result = parsePythonOutput(output);\r\n        \r\n            if (result.error) {\r\n                return res.status(500).json({ message: 'Error from Python script', error: result.error });\r\n            }\r\n        \r\n            const numbers = result.numbers;\r\n            if (!numbers || numbers.length === 0) {\r\n                return res.status( 404).json({ message: 'No Kural details found for the given parameters' });\r\n            }\r\n        \r\n            // Fetch Kural details from MongoDB\r\n            const kurals= await Thirukkural.find({ number: { $in: numbers } });\r\n        \r\n            if (kurals.length === 0) {\r\n                return res.status(404).json({ message: 'No Kural details found for the given numbers' });\r\n            }\r\n        \r\n            res.status(200).json(kurals);\r\n        });\r\n        \r\n    } catch (error) {\r\n        handleError(res, error);\r\n    }\r\n});\r\n\r\n// Middleware to handle 404 errors\r\napp.use((req, res, next) => {\r\n    res.status(404).json({ message: 'Endpoint not found' });\r\n});\r\n\r\n// Error handling middleware\r\napp.use((err, req, res, next) => {\r\n    handleError(res, err);\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n    console.log(`Server running at http://localhost:${port}`);\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}