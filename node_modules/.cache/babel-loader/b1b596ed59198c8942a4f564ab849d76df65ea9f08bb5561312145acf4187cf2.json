{"ast":null,"code":"var _jsxFileName = \"D:\\\\KURALBOT\\\\my-frontend\\\\src\\\\KuralSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { isEnglishWord } from './path/to/your/function'; // Adjust the import path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestComponent = () => {\n  _s();\n  const testIsEnglishWord = async () => {\n    const testWords = [{\n      word: \"hello\",\n      expected: true\n    },\n    // Known English word\n    {\n      word: \"kamathupaal\",\n      expected: false\n    },\n    // Non-English phonetic word\n    {\n      word: \"dictionary\",\n      expected: true\n    },\n    // Known English word\n    {\n      word: \"qwertyuiop\",\n      expected: false\n    },\n    // Random string\n    {\n      word: \"apple\",\n      expected: true\n    },\n    // Known English word\n    {\n      word: \"xyzzy\",\n      expected: false\n    } // Non-English word or not found\n    ];\n    for (const {\n      word,\n      expected\n    } of testWords) {\n      const result = await isEnglishWord(word);\n      console.log(`Testing \"${word}\": Expected: ${expected}, Got: ${result}`);\n      console.assert(result === expected, `Test failed for \"${word}\"`);\n    }\n  };\n  useEffect(() => {\n    testIsEnglishWord(); // Call the test function when the component mounts\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Check the console for test results!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 12\n  }, this);\n};\n_s(TestComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = TestComponent;\nexport default TestComponent;\nvar _c;\n$RefreshReg$(_c, \"TestComponent\");","map":{"version":3,"names":["React","useEffect","isEnglishWord","jsxDEV","_jsxDEV","TestComponent","_s","testIsEnglishWord","testWords","word","expected","result","console","log","assert","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/KURALBOT/my-frontend/src/KuralSearch.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { isEnglishWord } from './path/to/your/function';  // Adjust the import path\r\n\r\nconst TestComponent = () => {\r\n    const testIsEnglishWord = async () => {\r\n        const testWords = [\r\n            { word: \"hello\", expected: true },  // Known English word\r\n            { word: \"kamathupaal\", expected: false },  // Non-English phonetic word\r\n            { word: \"dictionary\", expected: true },  // Known English word\r\n            { word: \"qwertyuiop\", expected: false },  // Random string\r\n            { word: \"apple\", expected: true },  // Known English word\r\n            { word: \"xyzzy\", expected: false }  // Non-English word or not found\r\n        ];\r\n\r\n        for (const { word, expected } of testWords) {\r\n            const result = await isEnglishWord(word);\r\n            console.log(`Testing \"${word}\": Expected: ${expected}, Got: ${result}`);\r\n            console.assert(result === expected, `Test failed for \"${word}\"`);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        testIsEnglishWord();  // Call the test function when the component mounts\r\n    }, []);\r\n\r\n    return <div>Check the console for test results!</div>;\r\n};\r\n\r\nexport default TestComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,aAAa,QAAQ,yBAAyB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,SAAS,GAAG,CACd;MAAEC,IAAI,EAAE,OAAO;MAAEC,QAAQ,EAAE;IAAK,CAAC;IAAG;IACpC;MAAED,IAAI,EAAE,aAAa;MAAEC,QAAQ,EAAE;IAAM,CAAC;IAAG;IAC3C;MAAED,IAAI,EAAE,YAAY;MAAEC,QAAQ,EAAE;IAAK,CAAC;IAAG;IACzC;MAAED,IAAI,EAAE,YAAY;MAAEC,QAAQ,EAAE;IAAM,CAAC;IAAG;IAC1C;MAAED,IAAI,EAAE,OAAO;MAAEC,QAAQ,EAAE;IAAK,CAAC;IAAG;IACpC;MAAED,IAAI,EAAE,OAAO;MAAEC,QAAQ,EAAE;IAAM,CAAC,CAAE;IAAA,CACvC;IAED,KAAK,MAAM;MAAED,IAAI;MAAEC;IAAS,CAAC,IAAIF,SAAS,EAAE;MACxC,MAAMG,MAAM,GAAG,MAAMT,aAAa,CAACO,IAAI,CAAC;MACxCG,OAAO,CAACC,GAAG,CAAC,YAAYJ,IAAI,gBAAgBC,QAAQ,UAAUC,MAAM,EAAE,CAAC;MACvEC,OAAO,CAACE,MAAM,CAACH,MAAM,KAAKD,QAAQ,EAAE,oBAAoBD,IAAI,GAAG,CAAC;IACpE;EACJ,CAAC;EAEDR,SAAS,CAAC,MAAM;IACZM,iBAAiB,CAAC,CAAC,CAAC,CAAE;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOH,OAAA;IAAAW,QAAA,EAAK;EAAmC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACzD,CAAC;AAACb,EAAA,CAvBID,aAAa;AAAAe,EAAA,GAAbf,aAAa;AAyBnB,eAAeA,aAAa;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}