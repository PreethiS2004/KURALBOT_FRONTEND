{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst Thirukkural = require('./Thirukkural');\nconst cors = require('cors');\nconst {\n  spawn\n} = require('child_process'); // Use spawn instead of exec\nconst path = require('path');\nconst app = express();\nconst port = 5000;\n\n// Middleware to handle CORS\napp.use(cors());\n\n// Connect to MongoDB with error handling\nmongoose.connect('mongodb://127.0.0.1:27017/CHATBOT', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log('MongoDB connected successfully');\n}).catch(error => {\n  console.error('Error connecting to MongoDB:', error);\n  process.exit(1); // Exit the process if the connection fails\n});\n\n// Middleware\napp.use(express.json());\n\n// Endpoint to get Kural details based on query parameters\napp.get('/api/kurals', async (req, res) => {\n  try {\n    const {\n      chapterName,\n      sectionName,\n      verse,\n      translation,\n      explanation,\n      chater_group_tam,\n      chapter_group_eng\n    } = req.query;\n\n    // Initialize pythonScriptArgs here\n    let pythonScriptArgs = [];\n    if (chapterName) pythonScriptArgs.push(chapterName, \"chapterName\");\n    if (sectionName) pythonScriptArgs.push(sectionName, \"sectionName\");\n    if (verse) pythonScriptArgs.push(verse, \"verse\");\n    if (translation) pythonScriptArgs.push(`\"${translation}\"`, `\"translation\"`);\n    if (explanation) pythonScriptArgs.push(`\"${explanation}\"`, `\"explanation\"`);\n    if (chater_group_tam) pythonScriptArgs.push(`\"${chater_group_tam}\"`, `\"chater_group_tam\"`);\n    if (chapter_group_eng) pythonScriptArgs.push(`\"${chapter_group_eng}\"`, `\"chapter_group_eng\"`); // Add this line\n\n    if (pythonScriptArgs.length === 0) {\n      return res.status(400).json({\n        message: 'No valid query parameters provided'\n      });\n    }\n\n    // Execute the Python script using spawn\n    const pythonScriptPath = path.join(__dirname, 'test.py');\n    const pythonProcess = spawn('python', [pythonScriptPath, ...pythonScriptArgs]);\n    let output = '';\n    let errorOutput = '';\n    console.log('Python script args:', pythonScriptArgs);\n    pythonProcess.stdout.on('data', data => {\n      output += data.toString().trim();\n    });\n    pythonProcess.stderr.on('data', data => {\n      errorOutput += data.toString().trim();\n    });\n    pythonProcess.on('close', async code => {\n      if (code !== 0) {\n        console.error('Python script exited with code:', code);\n        console.error('Error output:', errorOutput);\n        return res.status(500).json({\n          message: 'Error executing Python script',\n          error: errorOutput\n        });\n      }\n\n      // Parse the output of the Python script\n      try {\n        const result = JSON.parse(output);\n        if (result.error) {\n          return res.status(500).json({\n            message: 'Error from Python script',\n            error: result.error\n          });\n        }\n        const numbers = result.numbers;\n        if (!numbers || numbers.length === 0) {\n          return res.status(404).json({\n            message: 'No Kural details found for the given parameters'\n          });\n        }\n\n        // Fetch Kural details from MongoDB\n        const kurals = await Thirukkural.find({\n          number: {\n            $in: numbers\n          }\n        });\n        if (kurals.length === 0) {\n          return res.status(404).json({\n            message: 'No Kural details found for the given numbers'\n          });\n        }\n        res.status(200).json(kurals);\n      } catch (parseError) {\n        console.error('Error parsing Python script output:', parseError);\n        res.status(500).json({\n          message: 'Error parsing Python script output',\n          error: parseError.message\n        });\n      }\n    });\n  } catch (error) {\n    console.error('Error handling request:', error);\n    res.status(500).json({\n      message: 'Server error',\n      error: error.message\n    });\n  }\n});\n\n// Middleware to handle 404 errors\napp.use((req, res, next) => {\n  res.status(404).json({\n    message: 'Endpoint not found'\n  });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Unhandled error:', err);\n  res.status(500).json({\n    message: 'Internal server error'\n  });\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","Thirukkural","cors","spawn","path","app","port","use","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","error","process","exit","json","get","req","res","chapterName","sectionName","verse","translation","explanation","chater_group_tam","chapter_group_eng","query","pythonScriptArgs","push","length","status","message","pythonScriptPath","join","__dirname","pythonProcess","output","errorOutput","stdout","on","data","toString","trim","stderr","code","result","JSON","parse","numbers","kurals","find","number","$in","parseError","next","err","listen"],"sources":["C:/KURALBOT/my-frontend/src/KuralSearch.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Thirukkural = require('./Thirukkural');\r\nconst cors = require('cors');\r\nconst { spawn } = require('child_process'); // Use spawn instead of exec\r\nconst path = require('path');\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Middleware to handle CORS\r\napp.use(cors());\r\n\r\n// Connect to MongoDB with error handling\r\nmongoose.connect('mongodb://127.0.0.1:27017/CHATBOT', {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n}).then(() => {\r\n    console.log('MongoDB connected successfully');\r\n}).catch((error) => {\r\n    console.error('Error connecting to MongoDB:', error);\r\n    process.exit(1); // Exit the process if the connection fails\r\n});\r\n\r\n// Middleware\r\napp.use(express.json());\r\n\r\n// Endpoint to get Kural details based on query parameters\r\napp.get('/api/kurals', async (req, res) => {\r\n    try {\r\n        const { chapterName, sectionName, verse, translation, explanation,chater_group_tam,chapter_group_eng } = req.query;\r\n\r\n        // Initialize pythonScriptArgs here\r\n        let pythonScriptArgs = [];\r\n        if (chapterName) pythonScriptArgs.push(chapterName, \"chapterName\");\r\n        if (sectionName) pythonScriptArgs.push(sectionName, \"sectionName\");\r\n        if (verse) pythonScriptArgs.push(verse, \"verse\");\r\n        if (translation) pythonScriptArgs.push(`\"${translation}\"`, `\"translation\"`);\r\n        if (explanation) pythonScriptArgs.push(`\"${explanation}\"`, `\"explanation\"`);\r\n        if (chater_group_tam) pythonScriptArgs.push(`\"${chater_group_tam}\"`, `\"chater_group_tam\"`);\r\n        if (chapter_group_eng) pythonScriptArgs.push(`\"${chapter_group_eng}\"`, `\"chapter_group_eng\"`); // Add this line\r\n\r\n        if (pythonScriptArgs.length === 0) {\r\n            return res.status(400).json({ message: 'No valid query parameters provided' });\r\n        }\r\n\r\n        // Execute the Python script using spawn\r\n        const pythonScriptPath = path.join(__dirname, 'test.py');\r\n        const pythonProcess = spawn('python', [pythonScriptPath, ...pythonScriptArgs]);\r\n\r\n        let output = '';\r\n        let errorOutput = '';\r\n        console.log('Python script args:', pythonScriptArgs);\r\n        pythonProcess.stdout.on('data', (data) => {\r\n            output += data.toString().trim(); \r\n        });\r\n\r\n        pythonProcess.stderr.on('data', (data) => {\r\n            errorOutput += data.toString().trim(); \r\n        });\r\n\r\n        pythonProcess.on('close', async (code) => {\r\n            if (code !== 0) {\r\n                console.error('Python script exited with code:', code);\r\n                console.error('Error output:', errorOutput);\r\n                return res.status(500).json({ message: 'Error executing Python script', error: errorOutput });\r\n            }\r\n        \r\n            // Parse the output of the Python script\r\n            try {\r\n                const result = JSON.parse(output);\r\n        \r\n                if (result.error) {\r\n                    return res.status(500).json({ message: 'Error from Python script', error: result.error });\r\n                }\r\n        \r\n                const numbers = result.numbers;\r\n                if (!numbers || numbers.length === 0) {\r\n                    return res.status(404).json({ message: 'No Kural details found for the given parameters' });\r\n                }\r\n        \r\n                // Fetch Kural details from MongoDB\r\n                const kurals = await Thirukkural.find({ number: { $in: numbers } });\r\n        \r\n                if (kurals.length === 0) {\r\n                    return res.status(404).json({ message: 'No Kural details found for the given numbers' });\r\n                }\r\n        \r\n                res.status(200).json(kurals);\r\n            } catch (parseError) {\r\n                console.error('Error parsing Python script output:', parseError);\r\n                res.status(500).json({ message: 'Error parsing Python script output', error: parseError.message });\r\n            }\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('Error handling request:', error);\r\n        res.status(500).json({ message: 'Server error', error: error.message });\r\n    }\r\n});\r\n\r\n\r\n// Middleware to handle 404 errors\r\napp.use((req, res, next) => {\r\n    res.status(404).json({ message: 'Endpoint not found' });\r\n});\r\n\r\n// Error handling middleware\r\napp.use((err, req, res, next) => {\r\n    console.error('Unhandled error:', err);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n});\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n    console.log(`Server running at http://localhost:${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}